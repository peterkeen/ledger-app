<% default 'month', Date.today %>
<% @months = query do %>
  select xtn_month from accounts_months group by xtn_month order by xtn_month desc
<% end %>
<% @cash = query do %>
  with starting_cash as (
      select
          sum(amount) as amount
      from
          ledger
      where
          account = 'Assets:Schwab:Checking'
          and cleared
          and not virtual
          and xtn_date < date_trunc('month', cast(:month as date))
  ), ending_cash as (
      select
          sum(amount) as amount
      from
          ledger
      where
          account = 'Assets:Schwab:Checking'
          and cleared
          and not virtual
          and xtn_date < date_trunc('month', cast(:month as date)) + '1 month'::interval
   ) select
       starting_cash.amount as "Starting Cash",
       ending_cash.amount as "Ending Cash",
       ending_cash.amount - starting_cash.amount as "Net Cash"
   from
       starting_cash,
       ending_cash
<% end %>

<% @inflows = query do %>
  with inflows as (
  select
     account,
     abs(sum(amount)) as amount
  from
     ledger
  where
     (
         account ~ '^Income'
         or (
             account = 'Liabilities:Amex'
             and xtn_id in (select xtn_id from expenses)
         )
         or (account ~ 'Assets:Receivable' and note ~ 'Deposit')
     )
     and cleared
     and not virtual
     and xtn_month = date_trunc('month', cast(:month as date))
  group by
     account
  order by
     account
  ) select
     account as "Account",
     amount as "Amount"
  from
     inflows
  union all
  select
     'Total' as "Account",
     sum(amount) as "Amount"
  from
     inflows
<% end %>

<% @outflows = query do %>
with budgeted_accounts as (
    select
        account
    from
        budget_months
    where
        xtn_month = date_trunc('month', cast(:month as date))
), x as (select
    case
    when account ~ 'Expenses' and account in (select account from budgeted_accounts) then 'Expenses - Budgeted'
    when account ~ 'Expenses' and account not in (select account from budgeted_accounts) and account !~ 'Taxes' then 'Expenses - Unbudgeted'
    when account ~ 'Taxes' then 'Taxes'
    when account ~ 'Assets' and account !~ 'Emily' then 'Savings'
    when account ~ 'Liabilities' then 'Debt Servicing'
    else account
    end as account,
    round(abs(sum(amount)), 2) as amount
from
    ledger
where
    xtn_month = date_trunc('month', cast(:month as date))
    and cleared
    and not virtual
    and commodity = '$'
    and (
      account ~ '^Expenses'
      or (account ~ 'Assets:Receivable' and xtn_id in (select xtn_id from expenses))
      or (account ~ 'Liabilities:Amex' and note ~ 'Payment')
      or (account ~* 'Assets:(Amex|401k|Vanguard)')
    )
group by
    account
) select * from (select
    account as "Account",
    sum(amount) as "Amount"
from
    x
group by
    account
order by
    account
) y
union all
select
    'Total' as "Account",
    sum(amount) as "Amount"
from
    x
<% end %>
<div class="page-header">
  <h1>Cash Flow</h1>
</div>
<div class="row">
  <div class="span12">
  <form class="form form-inline">
    <select name="month" class="input-medium">
      <% @selected_month = params[:month].to_s == "" ? nil : Date.parse(params[:month]).to_s%>
      <option value="">Month</option>
      <% @months.each do |row| %>
      <option value="<%= row[0].value %>" <%= (@selected_month == row[0].value.to_s) ? "selected" : "" %>><%= row[0].value.to_s %></option>
      <% end %>
    </select>
    <input type="submit" value="Update" class="btn">
  </form>
  </div>
</div>
<div class="row">
  <div class="span12">
    <%= table(@cash) %>
  </div>
</div>
<div class="row">
  <div class="span6">
    <h2>Inflows</h2>
    <%= @inflows.error %>
    <%= table(@inflows) %>
  </div>
  <div class="span6">
    <h2>Outflows</h2>
    <%= @outflows.error %>
    <%= table(@outflows) %>
  </div>
</div>
<div class="row">
  <div class="span12">
    <p>Error: <%= sprintf("%0.2f", @inflows.rows[-1][-1].value) %> - <%= sprintf("%0.2f", @outflows.rows[-1][-1].value) %> - <%= sprintf("%0.2f", @cash.rows[-1][-1].value) %> = <%= sprintf("%0.2f", @inflows.rows[-1][-1].value - @outflows.rows[-1][-1].value - @cash.rows[-1][-1].value) %></p>
  </div>
</div>
