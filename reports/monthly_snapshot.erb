<% @selected_month = params[:month].to_s == "" ? Date.new(Date.today.year, Date.today.month, 1) : Date.parse(params[:month]) %>

<% @months = query do %>
  select
    xtn_month
  from
    accounts_months
  group by
    xtn_month
  order by
    xtn_month desc
<% end %>

<% @income = query do %>
with inc as (
    select
      'Salary (after taxes and retirement)' as account,
      sum(amount) as amount
    from
      ledger
    where
      xtn_month = '<%= @selected_month %>'
      and account = 'Assets:Schwab:Checking'
      and note ~ 'Salary'
    union all
    select 
      'Sales (60% after expenses)' as account,
      0.6 * (-1 * sum(amount)) as amount
    from
      ledger
    where
      xtn_month = '<%= @selected_month %>'
      and (account ~ 'Income:Sales' or account ~ 'Expenses:Sales')
    union all
    select
      *
    from (
      select
        account,
        -1 * sum(amount) as amount
      from
        ledger
      where
        account ~ '^Income'
        and account !~ '^Income:Sales'
        and account !~ '^Income:Salary'
        and xtn_month = '<%= @selected_month %>'
      group by
        account
      order by
        account
    ) x
  )
  select account as "Account", amount as "Amount" from inc
  union all
  select 'Total' as "Account", sum(amount) as "Amount" from inc
<% end %>

<% @budgeted_expenses = query do %>
with budgeted as (  
  select
      b.account as "Account",
      b.amount as "Budget",
      coalesce(x.amount, 0) as "Spent",
      b.amount - coalesce(x.amount, 0) as "Diff"
  from
  (select * from budget_months where xtn_month = '<%= @selected_month %>' and amount > 0) b
  left outer join (
      select
          xtn_month,
          account,
          sum(amount) as amount
      from
          ledger
      where
          account in (select distinct account from budget_periods)
          and xtn_month = '<%= @selected_month %>'
          and tags !~ 'Reimburseable'
          and tags !~ 'nobudget'
      group by
          xtn_month,
          account
  ) x using (account)
  order by
     b.account
)
select
  *
from
  budgeted
union all
select
  'Total' as "Account",
  sum("Budget") as "Budget",
  sum("Spent") as "Spent",
  sum("Diff") as "Diff"
from
  budgeted
<% end %>

<% @unbudgeted_expenses = query do %>
  with ubexp as (
    select
      account as "Account",
      sum(amount) as "Amount"
    from
      expenses
    where
      account not in (select account from budget_months where xtn_month = '<%= @selected_month %>')
      and note !~ 'Salary'
      and account !~ 'Expenses:Sales:'
      and xtn_month = '<%= @selected_month %>'
    group by
      account
    order by
      account
  )
  select
    *
  from
    ubexp
  union all
  select
    'Total' as "Account",
    sum("Amount") as "Amount"
  from
    ubexp
<% end %>

<% @funds = query do %>
  with funds as (
    select
      account as "Fund",
      sum(amount) as "Amount"
    from
      ledger
    where
      account ~ '^Assets:Funds'
      and xtn_month = '<%= @selected_month %>'
    group by
      account
    having
      sum(amount) != 0
    order by
      account
  )
  select * from funds
  union all
  select 'Total' as "Fund", sum("Amount") as "Amount" from funds
<% end %>

<div class="page-title">
  <h1>Monthly Snapshot</h1>
</div>
<div class="row">
  <div class="span12">
    <form class="form form-inline">    
      <select name="month" class="input">
        <option value="">All Months</option>
        <% @months.each do |row| %>
          <option value="<%= row[0].value %>" <%= (@selected_month == row[0].value) ? "selected" : "" %>><%= row[0].value %></option>
        <% end %>
      </select>
      <input type="submit" value="Update" class="btn">
    </form>
  </div>
  <div class="span12">
    <h4>Summary</h4>
    <table class="table table-striped table-hover table-bordered table-condensed">
      <thead>
        <tr>
          <th>Category</th>
          <th><span class="pull-right">Amount</span></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Income</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @income.rows[-1][1].value) %></span></td>
        </tr>
        <tr>
          <td>Budgeted Expenses</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @budgeted_expenses.rows[-1][2].value) %></span></td>
        </tr>
        <tr>
          <td>Unbudgeted Expenses</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @unbudgeted_expenses.rows[-1][1].value) %></span></td>
        </tr>
        <tr>
          <td>Funds</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @funds.rows[-1][1].value) %></span></td>
        </tr>
        <tr>
          <td><strong>Net Cash</strong></td>
          <td><span class="pull-right"><strong><%= sprintf("%0.2f", @income.rows[-1][1].value - (@budgeted_expenses.rows[-1][2].value + @unbudgeted_expenses.rows[-1][1].value) - @funds.rows[-1][1].value) %></strong></span></td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="span6">
    <h4>Income</h4>
    <%= @income.error %>
    <%= table @income do |t|
          t.link /Account/ => "/reports/register?account=:0&month=#{@selected_month}", :if => ->(c,r){!(c.text =~ /(Salary|Sales|Total)/)}
          t.link /Account/ => "/reports/register?account=Income:Salary&month=#{@selected_month}", :if => ->(c,r){c.text =~ /Salary/}
          t.link /Account/ => "/reports/register?account=Income:Sales&month=#{@selected_month}", :if => ->(c,r){c.text =~ /Sales/}
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
        end
    %>
  </div>
  <div class="span6">
    <h4>Funds</h4>
    <%= @funds.error %>
    <%= table @funds do |t|
          t.link /Fund/ => "/reports/register?account=:0&month=#{@selected_month}&cleared=", :if => ->(c,r){c.text != "Total"}
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
        end
    %>
  </div>
  <div class="span12">
    <h4>Budgeted Expenses</h4>
    <%= @budgeted_expenses.error %>
    <%= table @budgeted_expenses do |t|
          t.decorate /Account/ => ExpensesDecorator.new(month: @selected_month, cleared: '')
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
        end
    %>
    <h4>Unbudgeted Expenses</h4>
    <%= @unbudgeted_expenses.error %>
    <%= table @unbudgeted_expenses do |t|
          t.decorate /Account/ => ExpensesDecorator.new(month: @selected_month, cleared: '')
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
        end
    %>
  </div>
</div>
