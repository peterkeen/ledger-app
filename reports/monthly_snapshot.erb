<script type="text/javascript" src="/public/js/canvasjs.min.js"></script>
<% @selected_month = params[:month].to_s == "" ? Date.new(Date.today.year, Date.today.month, 1) : Date.parse(params[:month]) %>

<% @months = query do %>
  select
    xtn_month
  from
    accounts_months
  group by
    xtn_month
  order by
    xtn_month desc
<% end %>

<% @cash = query do %>
    select
      sum(real_money) as real_money,
      sum(liquid_investments) as liquid_investments,    
      sum(funds) as funds,
      sum(liabilities) as liabilities,
      sum(real_money) + sum(liquid_investments) - sum(funds) + sum(liabilities) as amount
    from (
      select
        sum(case when account ~ '(<%= Constants::CURRENT_ACCOUNTS %>)' and account !~ 'Liabilities' then amount else 0 end) as real_money,
        sum(case when account ~ '^Assets:Funds:' then amount else 0 end) as funds,
        sum(case when account ~ '(Liabilities:Chase|Liabilities:Payable)' then amount else 0 end) as liabilities,
        sum(0) as liquid_investments
      from
        ledger
      where
        xtn_month <= '<%= @selected_month %>'    
      union all
      select
        sum(0) as real_money,
        sum(0) as funds,
        sum(0) as liabilities,
        sum(amount) as liquid_investments
      from (
        select 
          commodity,
          sum(amount) * (select price from prices where prices.commodity = ledger.commodity and date_trunc('month', price_date) <= '<%= @selected_month %>' order by price_date desc limit 1) as amount
        from
          ledger
        where
          account = 'Assets:Investments:Vanguard:Joint:Taxable'
          and commodity ~ '(<%= Constants::LIQUID_TICKERS %>)'
          and xtn_month <= '<%= @selected_month %>'    
        group by
          commodity
      ) x
    ) x
<% end %>

<% @income = query do %>
with inc as (
    select
      *
    from (
      select
        account,
        -1 * sum(amount) as amount
      from
        ledger
      where
        account ~ '^Income'
        and xtn_month = '<%= @selected_month %>'
      group by
        account
      order by
        account
    ) x
    union all
    select
      'Taxes out' as account, -1 * sum(amount) as amount
    from
      ledger
    where
      account ~ '^Expenses:Taxes'
      and xtn_month = '<%= @selected_month %>'
      and xtn_id not in (select distinct xtn_id from ledger where account ~ 'Assets:Funds' and xtn_month = '<%= @selected_month %>')
    union all
    select 'Retirement out' as account, -1 * sum(cost) as amount from ledger where account ~ 'Assets:.*:(Rollover|Roth|401K)' and xtn_month = '<%= @selected_month %>'
  )
  select replace(account, 'Income:', '') as "Account", amount as "Amount" from inc where round(amount, 0) != 0
  union all
  select 'Total' as "Account", sum(amount) as "Amount" from inc
<% end %>

<% @budgeted_expenses = query do %>
with budgeted as (
  select
      b.account as "Account",
      b.amount as "Budget",
      coalesce(x.amount, 0) as "Spent",
      b.amount - coalesce(x.amount, 0) as "Diff"
  from
  (select xtn_month, account, sum(amount) as amount from budget_months where xtn_month = '<%= @selected_month %>' and amount > 0 group by xtn_month, account) b
  left outer join (
      select
          xtn_month,
          account,
          sum(amount) as amount
      from
          ledger
      where
          account in (select distinct account from budget_periods)
          and xtn_month = '<%= @selected_month %>'
          and tags !~ 'Reimburseable'
          and tags !~ 'nobudget'
          and xtn_id not in (select distinct xtn_id from ledger where account ~ 'Assets:Funds' and xtn_month = '<%= @selected_month %>')
      group by
          xtn_month,
          account
  ) x using (account)
  order by
     b.account
)
select
  *
from
  budgeted
union all
select
  'Total' as "Account",
  sum("Budget") as "Budget",
  sum("Spent") as "Spent",
  sum("Diff") as "Diff"
from
  budgeted
<% end %>

<% @unbudgeted_expenses = query do %>
  with ubexp as (
    select
      account as "Account",
      sum(amount) as "Amount"
    from
      expenses
    where (
        (account not in (select account from budget_months where xtn_month = '<%= @selected_month %>'))
        or
        (account in (select account from budget_months where xtn_month = '<%= @selected_month %>') and tags ~ 'nobudget: true')
      )
      and tags !~ 'skipunbudget: true'
      and xtn_month = '<%= @selected_month %>'
      and account !~ '^Expenses:Taxes'
      and xtn_id not in (select distinct xtn_id from ledger where account ~ 'Assets:Funds' and xtn_month = '<%= @selected_month %>')
    group by
      account
    order by
      account
  )
  select
    *
  from
    ubexp
  union all
  select
    'Total' as "Account",
    sum("Amount") as "Amount"
  from
    ubexp
<% end %>

<% @funds = query do %>
  with funds as (
    select
      replace(account, 'Assets:Funds:', '') as "Fund",
      sum(case when amount > 0 and xtn_month = '<%= @selected_month %>' then amount else 0 end) as "In",
      sum(case when amount < 0 and xtn_month = '<%= @selected_month %>' then amount else 0 end) as "Out", 
      sum(case when xtn_month = '<%= @selected_month %>' then amount else 0 end) as "Net",
      sum(amount) as "Balance"
    from
      ledger
    where
      account ~ '^Assets:Funds'
      and account !~ '<%= Constants::LONG_TERM_FUNDS %>'
      and xtn_month <= '<%= @selected_month %>'
    group by
      account
    having
      round(sum(case when xtn_month = '<%= @selected_month %>' then amount else 0 end)) != 0 or round(sum(amount)) != 0
    order by
      account
  )
  select * from funds
  union all
  select 'Total' as "Fund", sum("In") as "In", sum("Out") as "Out", sum("Net") as "Net", sum("Balance") as "Balance" from funds
<% end %>

<% @long_term_funds = query do %>
  with funds as (
    select
      replace(account, 'Assets:Funds:', '') as "Fund",
      sum(case when amount > 0 and xtn_month = '<%= @selected_month %>' then amount else 0 end) as "In",
      sum(case when amount < 0 and xtn_month = '<%= @selected_month %>' then amount else 0 end) as "Out", 
      sum(case when xtn_month = '<%= @selected_month %>' then amount else 0 end) as "Net",
      sum(amount) as "Balance"
    from
      ledger
    where
      account ~ '^Assets:Funds'
      and account ~ '<%= Constants::LONG_TERM_FUNDS %>'
      and xtn_month <= '<%= @selected_month %>'
    group by
      account
    having
      round(sum(case when xtn_month = '<%= @selected_month %>' then amount else 0 end)) != 0 or round(sum(amount)) != 0
    order by
      account
  )
  select * from funds
  union all
  select 'Total' as "Fund", sum("In") as "In", sum("Out") as "Out", sum("Net") as "Net", sum("Balance") as "Balance" from funds  
<% end %>

<%
  @stash_start = params[:stash_start] || '2015-01-01'
  @asset_regex = params[:include_mortgage] ? 'Assets:(.*:(Checking|Savings)|Emigrant|ING|UWCU|Amex|House:Zestimate)' : 'Assets:(.*:(Checking|Savings)|Emigrant|ING|UWCU|Amex)'
  @liabilities_regex = params[:include_mortgage] ? 'Funds' : '(Funds|Mortgage)'
%>


<% @stash = query do %>
  with months as (
    select
        xtn_month
    from
        calendar
    where
        xtn_month >= '<%= @stash_start %>'
        and xtn_month <= '<%= @selected_month %>'
    group by
        xtn_month
    order by
        xtn_month
),
cash_assets as (
    select
        xtn_date,
        xtn_month,
        amount
    from
        ledger
    where
        account !~ 'Funds'
        and account ~ '<%= @asset_regex %>'
    order by
        xtn_date,
        amount
),
ending_prices as (
    select 
        xtn_month::date as xtn_month,
        commodity, 
        price
    from (
        select 
            date_trunc('month', price_date) as xtn_month,
            commodity,
            price,
            row_number() over (partition by date_trunc('month', price_date), commodity order by price_date desc) as rk
       from
            prices
    ) x
    where rk = 1
),
stocks as (
    select
        xtn_month,
        commodity,
        sum(amount) as amount
    from
        ledger
    where
        account ~ 'Assets:Investments'
    group by
        xtn_month,
        commodity
    order by
        xtn_month,
        commodity
),
stock_assets as (
    select
        xtn_month,
        sum(case when commodity = '$' then amount else amount * (select price from ending_prices p where p.xtn_month <= x.xtn_month and p.commodity = x.commodity order by p.xtn_month desc limit 1) end)  as amount
    from (
        select
            xtn_month,
            commodity,
            (select sum(amount) from stocks s where s.commodity = l.commodity and xtn_month <= m.xtn_month) as amount
        from
            months m,
            (select distinct commodity from stocks) l
        order by
            xtn_month,
            commodity
    ) x
    group by
        xtn_month
),
liabilities as (
   select
       xtn_date,
       xtn_month,
       amount
   from
       ledger
   where
       account ~ 'Liabilities'
       and account !~ '<%= @liabilities_regex %>'
)
select
    xtn_month as "Month",
    cash as "Cash",
    stock as "Investments",
    liabilities as "Liabilities",
    cash + stock + liabilities as "Stash"
from (
    select
        xtn_month,
        (select sum(coalesce(amount, 0)) from cash_assets where xtn_date < months.xtn_month + '1 month'::interval) as cash,
        (select coalesce(amount, 0) from stock_assets s where s.xtn_month = months.xtn_month) as stock,
        (select sum(coalesce(amount, 0)) from liabilities where xtn_date < months.xtn_month + '1 month'::interval) as liabilities
    from
        months
) x
order by xtn_month desc
<% end %>

<% @allocations = query do %>
with amounts as (
    select
        commodity,
        sum(amount) * (select price from prices where prices.commodity = ledger.commodity and date_trunc('month', price_date) <= '<%= @selected_month %>' order by price_date desc limit 1) as amount
    from
        ledger
    where
        account ~ 'Assets:Investments'
        and xtn_month <= '<%= @selected_month %>'
    group by
        commodity
    having
        sum(amount) > 0.01
),
allocations as (
    select
        commodity,
        amount * us_stock as us_stock,
        amount * us_bond as us_bond,
        amount * international_stock as international_stock,
        amount * international_bond as international_bond,
        amount * reit as reit
    from
        asset_allocation
        inner join amounts using (commodity)
    where
        from_date <= '<%= @selected_month %>'
        and coalesce(to_date, '2222-01-01') >= '<%= @selected_month %>'
)
select
    commodity as "Fund",
    us_stock as "US Stock",
    international_stock as "Intl Stock",
    reit as "REIT",
    us_bond as "US Bond",
    international_bond as "Intl Bond"
from
    allocations
union all
select
    'Total' as commodity,
    sum(us_stock),
    sum(international_stock),
    sum(reit),
    sum(us_bond),
    sum(international_bond)
from
    allocations
union all
select
    'Total Pct' as commodity,
    sum(us_stock) / (select sum(amount) from amounts),
    sum(international_stock) / (select sum(amount) from amounts),
    sum(reit) / (select sum(amount) from amounts),
    sum(us_bond) / (select sum(amount) from amounts),
    sum(international_bond) / (select sum(amount) from amounts)
from
    allocations
<% end %>

<div class="page-header">
  <h1>Monthly Snapshot <small><%= @selected_month %></small></h1>
</div>
<div class="row no-pdf">
  <div class="span12">
    <form class="form form-inline">    
      <select name="month" class="input">
        <option value="">Current Month</option>
        <% @months.each do |row| %>
          <option value="<%= row[0].value %>" <%= (@selected_month == row[0].value) ? "selected" : "" %>><%= row[0].value %></option>
        <% end %>
      </select>
      <input type="submit" value="Update" class="btn">
    </form>
  </div>
</div>
<div class="row">
  <div class="span6">
    <h4>Summary</h4>
    <table class="table table-striped table-hover table-bordered table-condensed">
      <thead>
        <tr>
          <th>Category</th>
          <th><span class="pull-right">Amount</span></th>
        </tr>
      </thead>
      <%
        @income_value = (@income.rows[-1][1].value rescue 0) || 0
        @budgeted_value = (@budgeted_expenses.rows[-1][2].value rescue 0) || 0
        @budgeted_diff = (@budgted_expenses.rows[-1][3].value rescue 0) || 0
        @unbudgeted_value = (@unbudgeted_expenses.rows[-1][1].value rescue 0) || 0
        @funds_in_value = ((@funds.rows[-1][1].value rescue 0) || 0) + ((@long_term_funds.rows[-1][1].value rescue 0) || 0)
        @funds_out_value = ((@funds.rows[-1][2].value rescue 0) || 0) + ((@long_term_funds.rows[-1][2].value rescue 0) || 0)
      %>
      <tbody>
        <tr>
          <td>Income</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @income_value) %></span></td>
        </tr>
        <tr>
          <td>Budgeted Expenses</td>
          <td><span class="pull-right"><span style="<%= @budgeted_diff > 0 ? 'color: red' : ''%>"><%= sprintf("%0.2f", @budgeted_value) %></span></span></td>
        </tr>
        <tr>
          <td>Unbudgeted Expenses</td>
          <td><span class="pull-right"><span style="<%= @unbudgeted_value > 500 ? 'color: red' : '' %>"><%= sprintf("%0.2f", @unbudgeted_value) %></span></span></td>
        </tr>
        <tr>
          <td>Funds In</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @funds_in_value) %></span></td>
        </tr>
        <tr>
          <td>Funds Out</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @funds_out_value) %></span></td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="span6">
    <h4>Cash</h4>    
    <table class="table table-striped table-hover table-bordered table-condensed">
      <thead>
        <tr>
          <th>Category</th>
          <th><span class="pull-right">Amount</span></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Bank Balance</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][0].value) %></span></td>
        </tr>
        <tr>
          <td>Liquid Investments</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][1].value) %></span></td>
        </tr>
        <tr>
          <td>Fund Balance</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][2].value) %></span></td>
        </tr>
        <tr>
          <td>Liabilities Balance</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][3].value) %></span></td>
        </tr>
        <tr>
          <td>Cash Balance</td>
          <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][4].value) %></span></td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
<div class="row">
  <div class="span6">
    <h4>Income</h4>
    <%= @income.error %>
    <%= table @income do |t|
          t.link /Account/ => "/reports/_register?account=:0&month=#{@selected_month}", :if => ->(c,r){!(c.text =~ /(Salary|Total)/)}
          t.link /Account/ => "/reports/_register?account=Income:Salary&month=#{@selected_month}", :if => ->(c,r){c.text =~ /Salary/}
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
        end
    %>
  </div>
  <div class="span6">
    <h4>Unbudgeted Expenses</h4>
    <%= @unbudgeted_expenses.error %>
    <%= table @unbudgeted_expenses do |t|
          t.decorate /Account/ => ExpensesDecorator.new(month: @selected_month, cleared: '')
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
          t.decorate /Amount/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){c.value && c.value >= 500 && r[0].text == 'Total'}
          t.decorate /Amount/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){c.value && c.value >= 100 && r[0].text != 'Total'}
        end
    %>
  </div>
</div>
<div class="row">
  <div class="span12">
    <h4>Budgeted Expenses</h4>
    <%= @budgeted_expenses.error %>
    <%= table @budgeted_expenses do |t|
          t.decorate /Account/ => ExpensesDecorator.new(month: @selected_month, cleared: '')
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
          t.decorate /Diff/ => StyleDecorator.new(color: 'red'), :if => lambda { |c,r| c.value < 0 }
        end
    %>
    <h4>Short-Term Funds</h4>
    <%= @funds.error %>
    <%= table @funds do |t|
          t.link /Fund/ => "/reports/_register?account=Assets:Funds::0&month=#{@selected_month}&cleared=", :if => ->(c,r){c.text != "Total"}
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
          t.decorate /Net/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){ (r[3].value || 0) < 0 }
          t.decorate /Net/ => StyleDecorator.new('color' => 'green'), :if => ->(c,r){ (r[3].value || 0) > 0 }
        end
    %>
    <h4>Long-Term Funds</h4>
    <%= @long_term_funds.error %>
    <%= table @long_term_funds do |t|
          t.link /Fund/ => "/reports/_register?account=Assets:Funds::0&month=#{@selected_month}&cleared=", :if => ->(c,r){c.text != "Total"}
          t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
          t.decorate /Net/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){ r[3].value < 0 }
          t.decorate /Net/ => StyleDecorator.new('color' => 'green'), :if => ->(c,r){ r[3].value > 0 }
        end
    %>
  </div>
</div>
<div class="row">
  <div class="span12">
    <h4>Stash</h4>
    <script type="text/javascript">
      $(function() {
        var chart = new CanvasJS.Chart('chart-container',
        {
          axisX:{
            gridColor: "Silver",
            tickColor: "silver",
            valueFormatString: "YYYY/MM",
            intervalType: "month",
            interval: 12
          }, 
          data: [
            {
              type: "stackedColumn",
              name: "Cash",
              color: "#3333AA",
              showInLegend: true,
              dataPoints: [
                <% @stash.rows.each do |row| %>
                  <% dateval = row[0].value; date = "new Date(#{dateval.year},#{dateval.month - 1},#{dateval.day})" %>
                  { x: <%= date %>, y: <%= sprintf("%0.2f", row[1].value || 0) %> },
                <% end %>
              ]
            },
            {
              type: "stackedColumn",
              name: "Investments",
              color: "#33AA33",
              showInLegend: true,
              dataPoints: [
                <% @stash.rows.each do |row| %>
                  <% dateval = row[0].value; date = "new Date(#{dateval.year},#{dateval.month - 1},#{dateval.day})" %>
                  { x: <%= date %>, y: <%= sprintf("%0.2f", row[2].value || 0) %> },
                <% end %>
              ]
            },                
            {
              type: "stackedColumn",
              name: "Liabilities",
              color: "#AA3333",
              showInLegend: true,
              dataPoints: [
                <% @stash.rows.each do |row| %>
                  <% dateval = row[0].value; date = "new Date(#{dateval.year},#{dateval.month - 1},#{dateval.day})" %>
                  { x: <%= date %>, y: <%= sprintf("%0.2f", row[3].value || 0) %> },
                <% end %>
              ]
            },
            {
              type: "spline",
              name: "Stash",
              color: "#222222",
              markerBorderColor: "#222222",
              markerColor: "#CCCCCC",
              lineThickness: 2,
              showInLegend: true,
              dataPoints: [
                <% @stash.rows.each do |row| %>
                  <% dateval = row[0].value; date = "new Date(#{dateval.year},#{dateval.month - 1},#{dateval.day})" %>
                  { x: <%= date %>, y: <%= sprintf("%0.2f", row[4].value || 0) %> },
                <% end %>
              ]
            },                
          ]
        });
        chart.render();
      });
    </script>
    <div id="chart-container" style="height: 400px; width: 100%" class="no-pdf"></div>
    <div class="no-pdf">
      <a target="_blank" href="https://personal.vanguard.com/us/myaccounts/balancesovertime">(detailed investment balances over time on Vanguard)</a>
    </div>
    <%= @stash.error %>
    <%= table @stash %>
  </div>
</div>
<div class="row">
  <div class="span8">
    <h4>Allocations</h4>
    <%= @allocations.error %>
    <%= table @allocations %>
  </div>
  <div class="span4">
    <div id="allocation-chart" style="height: 400px; width: 80%" class="no-pdf"></div>
    <script>
      $(function() {
        var chart = new CanvasJS.Chart('allocation-chart',
        {
          data: [
            {
              type: "doughnut",
              toolTip: "{y}",
              startAngle: 270,
              dataPoints: [
              <% @data = @allocations.rows[-1].drop(1).map { |c| sprintf("%0.1f", c.value * 100) } %>
              { y: <%= @data[0] %>, label: "US Stock", color: "#801515" },
              { y: <%= @data[1] %>, label: "Intl Stock", color: "#AA3939" },
              { y: <%= @data[2] %>, label: "REIT", color: "#D46A6A" },
              { y: <%= @data[3] %>, label: "US Bond", color: "#373276" },
              { y: <%= @data[4] %>, label: "Intl Bond", color: "#595494" },

              ]
            }
          ]
        });
        chart.render();
      });
    </script> 
  </div>
</div>  

