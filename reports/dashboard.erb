<% @last_bills = query do %>
  select
    account as "Account",
    xtn_date as "Last Paid",
    amount as "Amount"
  from
    ledger
  where
    (account, xtn_date) in (
      select
        account,
        max(xtn_date) as xtn_date
      from
        ledger
      where
        (account ~ 'Expenses:(Utils|Cable|Interest:Mortgage)' or account = 'Liabilities:Mazda')
        and account != 'Expenses:Utils:Water'
        and account !~ ':Fees'
        and xtn_date <= :to
      group by
        account
    )
    and amount > 0
  order by
    account
<% end %>

<% @current_accounts = query do %>
 with current_accounts as (select
     account,
     bank as bank,
     virtual as real,
     uncleared as uncleared
 from (
 select
     account,
     sum(amount) as virtual,
     sum(case when cleared and not virtual then amount else 0 end) as bank,
     sum(case when not cleared then amount else 0 end) as uncleared
 from
     ledger
 where
     account in ('Assets:Schwab:Checking', 'Liabilities:Chase:SP')
     and xtn_date <= :to
 group by
     account
 ) x
 order by
     account
 )
 select
     account as "Account",
     bank as "Bank",
     real as "Real",
     uncleared as "Uncleared"
 from current_accounts
 union all
 select
     'Total' as "Account",
     sum(bank) as "Bank",
     sum(real) as "Real",
     sum(uncleared) as "Uncleared"
 from current_accounts    
<% end %>

<% @emergency_fund_target = ENV['EMERGENCY_FUND_TARGET'] || 3 %>
<% @emergency_fund = query do %>
 select
     em.emergency_fund as "Emergency Fund",
     ex.expenses as "Trailing 12 Month Expenses",
     em.emergency_fund / ex.expenses as "Months",
     case when em.emergency_fund / ex.expenses > <%= @emergency_fund_target %> then 0 else (<%= @emergency_fund_target %> - (em.emergency_fund / ex.expenses)) * ex.expenses end as "Needed"
 from (
     select
         sum(amount) as emergency_fund
     from
         ledger
     where
         account = 'Assets:Funds:Emergency'
 ) em,
(
     select
         avg(amount) as expenses
     from (
         select
             xtn_month,
             sum(amount) as amount
         from
             ledger
         where
             (
               account ~ '^Expenses'
               and account !~ '(Depreciation|Taxes|Interest|Insurance|Travel|Computers|Medical|Bike|Wedding|Furniture|Stripe|Car|Moving|Sales|House)'
               and tags !~ '(Emergency|Reimbursable)'
             )
             or
             (
               account in ('Expenses:Interest:Mortgage', 'Assets:House:Equity', 'Assets:House:Escrow')
               and tags !~ 'nobudget'
             )          
             and xtn_month != date_trunc('month', now())::date
         group by
             xtn_month
         order by
             xtn_month desc
         limit 12
     ) x
 ) ex
<% end %>

<% @fund_levels = query do %>
 select
     replace(account, 'Assets:Funds:', '') as "Account",
     sum(amount) as "Balance"
 from
     ledger
 where
     account ~ 'Assets:Funds'
     and account !~ 'Assets:Funds:Emergency'
 group by
     account
 having
     round(sum(amount)) != 0
 order by
     account
<% end %>

<% @uncleared = query do %>
 select
     xtn_date as "Date",
     note as "Payee",
     account as "Account",
     amount as "Amount"
 from
     ledger
 where
     not cleared
     and xtn_date <= :to
     and account in ('Assets:Schwab:Checking', 'Liabilities:Chase:SP')
 order by
     xtn_date,
     account,
     note
<% end %>

<% @last_updated_report = query do %>
select
    max(updated_at at time zone 'UTC')
from
    update_history
<% end %>
<%
def relative_time(start_time)
  diff_seconds = Time.now.utc - start_time.utc
  case diff_seconds
  when 0 .. 59
    return"#{diff_seconds.to_i} seconds ago"
  when 60 .. (3600-1)
    return "#{(diff_seconds/60).to_i} minutes ago"
  when 3600 .. (3600*24-1)
    return "#{(diff_seconds/3600).to_i} hours ago"
  when (3600*24) .. (3600*24*30) 
    return "#{(diff_seconds/(3600*24)).to_i} days ago"
  else
    return start_time.strftime("%m/%d/%Y")
  end
end
@last_updated = relative_time(@last_updated_report.rows[0][0].value)
%>

<% @unbudgeted = query do %>
  select
    real_money - funds + liabilities
  from (
    select
      sum(case when account in ('Assets:Schwab:Checking', 'Assets:Amex', 'Assets:Receivable:Emily') then amount else 0 end) as real_money,
      sum(case when account ~ '^Assets:Funds:' then amount else 0 end) as funds,
      sum(case when account in ('Liabilities:Chase:SP', 'Liabilities:Payable') then amount else 0 end) as liabilities
    from
      ledger
  ) x;
<% end %>

<% @budget = BudgetSummaryReport.run %>
<% @budget_remaining = (@budget.rows[0][3].value || 0) %>
<% @budget_color = @budget_remaining > 0 ? 'green' : 'red' %>
<% @unbudgeted_remaining = @unbudgeted.rows[0][0].value %>
<% @unbudgeted_color = @unbudgeted_remaining > 0 ? 'green' : 'red' %>
<%
  payday_bench = Date.parse(ENV['LEDGER_PAYDAY_BENCHMARK'])
  @next_payday = payday_bench + (((Date.today() - payday_bench).to_f / 14.0).ceil * 14)
  @days_til_next_payday = (@next_payday - Date.today()).to_f.ceil
%>
<% @goals = query do %>
select
    goal as "Goal",
    goal_amount as "Goal Amount",
    spent_amount as "Amount",
    goal_amount - spent_amount as "Left"
from (
    select
        'Food' as goal,
        (select sum(amount) / 4 from budget_months where account ~* 'Expenses:Food:(Breakfast|Lunch|Dinner)' and xtn_month = (select max(xtn_month) from budget_months)) as goal_amount,
        (select sum(amount) from expenses where account ~* 'Expenses:Food:(Breakfast|Lunch|Dinner)' and date_trunc('week', xtn_date) = (select max(date_trunc('week', xtn_date)) from expenses)) as spent_amount
    union all
    select
        'COBRA 18 Months' as goal,
        1378.65 * 18 as goal_amount,
        (select sum(amount) from ledger where account ~ 'Medical' and virtual) as spent_amount
    union all
    select
        'Liabilities:Mazda' as goal,
        0 as goal_amount,
        (select abs(sum(amount)) from ledger where account = 'Liabilities:Mazda') as spent_amount
    ) x
<% end %>

<div class="page-header">
  <h1>Dashboard <small>Updated <%= @last_updated %> (<a href="/reports/budget_detail">B</a>: <span style="color: <%= @budget_color %>"><%= sprintf("$%0.2f", @budget_remaining) %></span> U: <span style="color: <%= @unbudgeted_color %>"><%= sprintf("$%0.2f", @unbudgeted_remaining) %></span>) Payday: <%= @next_payday.strftime %> (<%= @days_til_next_payday %> days)</small></h1>
</div>
<div class="row">
  <div class="span6">
    <h3><a href="/reports/bills">Last Bills</a></h3>
    <%= table(@last_bills) do |t|
          t.decorate /Account/ => ExpensesDecorator.new(year: ->(c,r){r[1].value})
          t.decorate /Last Paid/ => StyleDecorator.new(color: 'red'), :if => lambda { |c,r| c.value + 25 <= Date.today }
        end
    %>
  </div>
  <div class="span6">
    <h3><a href="/reports/accounts">Current Accounts</a></h3>
    <%= table(@current_accounts) do |t|
          t.link /Account/ => '/reports/register?account=:this&year=:now', :if => lambda{|c,r| c.value != "Total"}
        end
    %>
  </div>
</div>
<div class="row">
  <div class="span6">
    <h3>Fund Levels</h3>
    <%= table(@fund_levels) do |t|
          t.link /Account/ => '/reports/register?account=Assets:Funds::0$&include_virtual=on&cleared='
          t.decorate /Balance/ => StyleDecorator.new(color: 'red'), :if => lambda { |c,r| c.value < 0 }
        end
    %>
  </div>
  <div class="span6">
    <h3><a href="/reports/register?account=Assets:Funds:Emergency&include_virtual=on&cleared=">Emergency Fund Longevity</a></h3>
    <%= @emergency_fund.error %>
    <%= table(@emergency_fund) do |t|
          t.decorate /(Months|Needed)/ => StyleDecorator.new(color: 'red'), :if => lambda { |c,r| r[3].value > 0.000001 }
          t.link /Trailing 12 Month/ => '/reports/monthly_expenses'
        end %>
    <h3>Goals</h3>
    <%= @goals.error %>
    <%= table(@goals) do |t|
          t.link /^Goal$/ => '/reports/register?account=:this&week=:now'
        end %>
  </div>
</div>
<div class="row">
  <div class="span12">
    <h3>Uncleared Transactions</h3>
    <%= table @uncleared do |t|
          t.link /Payee/ => '/reports/register?payee=:this&month=:now&cleared='
          t.link /Account/ => '/reports/register?account=:this&month=:now&cleared='
        end %>
  </div>
</div>
